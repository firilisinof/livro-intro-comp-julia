{
  "hash": "6aabf25d22204d406b37e29b17e25002",
  "result": {
    "engine": "julia",
    "markdown": "---\nengine: julia\n---\n\n\n\n\n\n\n# Indo além de uma dimensão (Matrizes)\n\nAté o momento trabalhamos com estruturas com mais de uma dimensão, mas sem\nolharmos muito bem o seu tipo. Nessa aula vamos procurar entender as diferenças\nentre elas e como isso pode ser usado ao nosso favor.\n\nVamos começar com as listas:\n\n\n\n\n\n\n::: {#2 .cell execution_count=1}\n``` {.julia .cell-code}\nv = [1, 2, 3]\ntypeof(v)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nVector{Int64} (alias for Array{Int64, 1})\n```\n:::\n:::\n\n\n\n\n\n\n\n\nO tipo devolvido é: Vector{Int64} (alias for Array{Int64, 1}). No caso isso significa\nque v é um vetor de inteiros, ou um array de uma dimensão. Da mesma forma \n\n\n\n\n\n\n\n::: {#4 .cell execution_count=1}\n``` {.julia .cell-code}\nv = zeros(Int64, 3)\ntypeof(v)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nVector{Int64} (alias for Array{Int64, 1})\n```\n:::\n:::\n\n\n\n\n\n\n\n\nMas, vetores podem ser mais flexíveis, como por exemplo abaixo:\n\n\n\n\n\n\n::: {#6 .cell execution_count=1}\n``` {.julia .cell-code}\nv = [1, 2.0, \"três\"]\ntypeof(v)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nVector{Any} (alias for Array{Any, 1})\n```\n:::\n:::\n\n\n\n\n\n\n\n\nNesse caso o tipo de vetor, deixa de ser de inteiros e passa a ser \"Any\",\nou seja Vector{Any} (alias for Array{Any, 1}).\n\nMais ainda, imaginem a seguinte situação:\n\n\n\n\n\n\n::: {#8 .cell execution_count=1}\n``` {.julia .cell-code}\na = [1, 2, 3]\npush!(v, a)\ntypeof(v)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nVector{Any} (alias for Array{Any, 1})\n```\n:::\n:::\n\n\n\n\n\n\n\n\nNesse caso, o vetor continua sendo do tipo Any, mas na quarta posição temos \num vetor com três inteiros. \nCom isso podemos ver que as estruturas de vetores podem ser bem flexíveis.\nMas, apesar disso, quando temos estruturas de tipos diferentes, com muita flexibilidade,\ngeralmente há alguma penalidade de uso, geralmente no desempenho.\n\nPor outro lado, podemos ter estruturas com mais de uma dimensão, no caso\nelas são denominadas matrizes. Elas podem ser criadas com a função zeros que\njá usamos acima.\n\n\n\n\n\n\n::: {#10 .cell execution_count=1}\n``` {.julia .cell-code}\nm = zeros(Int64, 3, 2)\ntypeof(m)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nMatrix{Int64} (alias for Array{Int64, 2})\n```\n:::\n:::\n\n\n\n\n\n\n\n\nAcima foi criada uma matriz de duas dimensões com 3 linhas e duas colunas.\nSeus elementos podem se acessados como em um vetor, mas agora com dois indíces.\n\n\n\n\n\n\n::: {#12 .cell execution_count=1}\n``` {.julia .cell-code}\nm[1, 2]  = 10\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n10\n```\n:::\n:::\n\n\n\n::: {#14 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction imprime(m::Array{Int64,2})\n    println(m)\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nimprime (generic function with 1 method)\n```\n:::\n:::\n\n\n\n::: {#16 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction imprime(m::Vector{Vector{Int64}})\n    println(m[1])\n    println(m[2])\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nimprime (generic function with 2 methods)\n```\n:::\n:::\n\n\n\n::: {#18 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction imprime(m::Vector{Vector{Int64}})\n    for i in m\n        println(i)\n    end\n end\n\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nimprime (generic function with 2 methods)\n```\n:::\n:::\n\n\n\n::: {#20 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction imprime(m::Vector{Vector{Int64}})\n    for i in m\n        for j in m[i]\n            println(j,\"  \")\n        end   \n    end\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nimprime (generic function with 2 methods)\n```\n:::\n:::\n\n\n\n::: {#22 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction imprime(m::Vector{Vector{Int64}})\n    for i in m\n        print(\"|\")\n        for j in i\n            print(j,\"  \")\n        end\n        println(\"|\")   \n    end\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nimprime (generic function with 2 methods)\n```\n:::\n:::\n\n\n\n::: {#24 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction imprimeMatriz(m::Matrix{Int64})\n    println(m)\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nimprimeMatriz (generic function with 1 method)\n```\n:::\n:::\n\n\n\n::: {#26 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction imprimeMatriz(m::Matrix{Int64})\n    i = 1\n    while i < size(m)[1]\n        println(m[1])\n        i += 1\n    end\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nimprimeMatriz (generic function with 1 method)\n```\n:::\n:::\n\n\n\n::: {#28 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction imprimeMatriz(m::Matrix{Int64})\n    i = 1\n    while i < size(m)[1]\n        j = 1\n        while j < size(m)[2]\n            print(m[i, j], \" \")\n            j += 1\n        end\n        println()   \n        i += 1\n    end\nend\n\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nimprimeMatriz (generic function with 1 method)\n```\n:::\n:::\n\n\n\n::: {#30 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction preencheMatriz(m::Matrix{Int64})\n    i = 1\n    while i <= length(m)\n        m[i] = rand(Int) % 10\n        i += 1\n    end\nend\n\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\npreencheMatriz (generic function with 1 method)\n```\n:::\n:::\n\n\n\n::: {#32 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction criaIdentidate(tam::Int64)\n    m = zeros(Int64, tam, tam)\n    i = 1\n    while i <= tam\n        m[i, i] = 1\n    end\n    return m  \nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ncriaIdentidate (generic function with 1 method)\n```\n:::\n:::\n\n\n\n\n\n\n\n\nOperações diretas com matrizes tipo +, - e *\n\n",
    "supporting": [
      "15-matrizes_files"
    ],
    "filters": [],
    "includes": {}
  }
}
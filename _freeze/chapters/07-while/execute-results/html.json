{
  "hash": "aad27357c2ac5b97e7fcd11aa822dbaf",
  "result": {
    "engine": "julia",
    "markdown": "---\nengine: julia\n---\n\n\n\n\n\n\n\n\n# Estruturas de Repetição Iterativas {#sec-while}\n\nAté o momento, vimos que o computador é muito bom para fazer cálculos e repetições. Realizamos essas repetições utilizando funções recursivas, onde uma função chama a si mesma para resolver problemas menores. Agora, vamos explorar uma forma alternativa de realizar repetições: a abordagem iterativa.\n\n## Introdução ao `while`\n\nA estrutura `while` é uma das formas mais fundamentais de criar laços (em inglês, _loops_) em programação. Ela permite que um bloco de código seja executado repetidamente enquanto uma condição específica for verdadeira, de forma iterativa. A sintaxe básica do `while` em Julia é:\n\n\n\n\n\n\n\n\n::: {#2 .cell execution_count=0}\n``` {.julia .cell-code}\nwhile condição\n    # Bloco de código a ser repetido\nend\n```\n:::\n\n\n\n\n\n\n\n\n\n\nO funcionamento do `while` segue estes passos:\n\n1. A condição é avaliada\n2. Se a condição for verdadeira, o bloco de código é executado\n3. Após a execução do bloco, a condição é avaliada novamente\n4. Este ciclo continua até que a condição se torne falsa\n\nUm aspecto importante para entender sobre o `while` é que para evitar um loop infinito (um laço que nunca termina), algo relacionado à condição deve ser modificado dentro do bloco de código.\n\nVamos começar com um exemplo simples: contagem regressiva.\n\n\n\n\n\n\n\n\n::: {#4 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction contagem_regressiva(n)\n    while n > 0\n        println(n)\n        n = n - 1  # Esta linha é essencial para evitar um loop infinito\n    end\n    println(\"Fim!\")\nend\n\ncontagem_regressiva(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5\n4\n3\n2\n1\nFim!\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\nNeste exemplo, a condição `n > 0` é inicialmente verdadeira (assumindo que `n` começa com um valor positivo). O bloco de código imprime o valor atual de `n` e, em seguida, decrementa `n` em 1. Eventualmente, `n` chegará a zero, tornando a condição falsa e encerrando o loop.\n\n## Comparando Recursão e Iteração\n\nPara entender melhor a diferença entre recursão e iteração, vamos reescrever algumas funções que implementamos anteriormente usando recursão.\n\n### Contagem Regressiva\n\nPrimeiro, vamos relembrar a versão recursiva da contagem regressiva:\n\n\n\n\n\n\n\n\n::: {#6 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction contagem_recursiva(n)\n    if n <= 0\n        println(\"Fim!\")\n    else\n        println(n)\n        contagem_recursiva(n - 1)\n    end\nend\n\ncontagem_recursiva(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5\n4\n3\n2\n1\nFim!\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\nComparando as duas implementações, podemos observar que:\n- Na versão recursiva, o caso base (`n <= 0`) corresponde à condição de parada do `while`\n- A chamada recursiva com `n - 1` corresponde à atualização de `n` no `while`\n\nAmbas as versões produzem o mesmo resultado, mas com abordagens diferentes.\n\n### Soma dos Primeiros N Números\n\nVamos implementar uma função que calcula a soma dos primeiros `n` números inteiros positivos (1 + 2 + ... + n), usando tanto recursão quanto `while`.\n\nVersão recursiva:\n\n\n\n\n\n\n\n\n::: {#8 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction soma_recursiva(n)\n    if n <= 0\n        return 0\n    else\n        return n + soma_recursiva(n - 1)\n    end\nend\n\nprintln(\"Soma dos primeiros 5 números (recursiva): \", soma_recursiva(5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSoma dos primeiros 5 números (recursiva): 15\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\nVersão com `while`:\n\n\n\n\n\n\n\n\n::: {#10 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction soma_while(n)\n    soma = 0\n    i = 1\n    \n    while i <= n\n        soma = soma + i\n        i = i + 1\n    end\n    \n    return soma\nend\n\nprintln(\"Soma dos primeiros 5 números (while): \", soma_while(5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSoma dos primeiros 5 números (while): 15\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\nNa versão recursiva, temos um caso base explícito (`n <= 0`) e uma chamada recursiva que reduz o problema. Na versão com `while`, utilizamos uma variável de controle `i` que é incrementada a cada iteração, e uma variável acumuladora `soma` que armazena o resultado parcial.\n\n## Calculando Séries Matemáticas\n\nAs estruturas de repetição são especialmente úteis para calcular somas de séries matemáticas. Vamos implementar uma função para calcular a aproximação do seno usando a série de Taylor:\n\n$$\\sin(x) = x - \\frac{x^3}{3!} + \\frac{x^5}{5!} - \\frac{x^7}{7!} + \\ldots$$\n\nEsta série pode ser representada como:\n\n$$\\sin(x) = \\sum_{n=0}^{\\infty} \\frac{(-1)^n \\cdot x^{2n+1}}{(2n+1)!}$$\n\nImplementação usando `while`:\n\n\n\n\n\n\n\n\n::: {#12 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction sin_taylor(x, termos = 10)\n    resultado = 0.0\n    termo = x\n    i = 0\n    \n    while i < termos\n        # Adicionamos o termo atual à soma\n        resultado = resultado + termo\n        \n        # Calculamos o próximo termo\n        i = i + 1\n        termo = -termo * x * x / ((2 * i) * (2 * i + 1))\n    end\n    \n    return resultado\nend\n\n# Teste com π/6 (30 graus), cujo seno é 0.5\nprintln(\"sin(π/6) ≈ \", sin_taylor(π/6))\nprintln(\"sin(π/6) exato: \", sin(π/6))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsin(π/6) ≈ 0.49999999999999994\nsin(π/6) exato: 0.49999999999999994\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\nObserve como o `while` permite um controle preciso sobre o número de termos da série que queremos calcular.\n\nVamos comparar com uma implementação recursiva:\n\n\n\n\n\n\n\n\n::: {#14 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction sin_taylor_recursivo(x, i = 0, termos = 10, termo = x, resultado = 0.0)\n    if i >= termos\n        return resultado\n    else\n        # Adicionamos o termo atual à soma\n        novo_resultado = resultado + termo\n        \n        # Calculamos o próximo termo\n        novo_i = i + 1\n        novo_termo = -termo * x * x / ((2 * novo_i) * (2 * novo_i + 1))\n        \n        return sin_taylor_recursivo(x, novo_i, termos, novo_termo, novo_resultado)\n    end\nend\n\nprintln(\"sin(π/6) recursivo ≈ \", sin_taylor_recursivo(π/6))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsin(π/6) recursivo ≈ 0.49999999999999994\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\nComo podemos observar, a versão recursiva é mais complexa, pois precisamos passar vários parâmetros adicionais para manter o estado entre as chamadas recursivas. A versão com `while` é mais clara e direta neste caso.\n\n## Quando Usar Recursão e Iteração?\n\nTanto a recursão quanto a iteração podem ser usadas para resolver problemas de repetição, cada uma com seus pontos fortes:\n\n### Vantagens da iteração\n\n- Geralmente mais eficiente em termos de memória\n- Evita o risco de estouro de pilha para entradas grandes\n- Pode ser mais intuitivo para operações de repetição simples\n- Permite um controle mais detalhado sobre o processo de iteração\n\n### Vantagens da recursão\n\n- Frequentemente mais elegante para problemas que se decompõem naturalmente\n- Pode tornar o código mais conciso e legível para certos algoritmos\n- Reflete diretamente definições matemáticas recursivas\n- Particularmente útil para estruturas de dados hierárquicas\n\nUma regra prática é:\n\n- Use iteração quando precisar repetir uma operação um número fixo ou indeterminado de vezes\n- Use recursão quando o problema puder ser naturalmente dividido em subproblemas menores do mesmo tipo\n\n## Verifique seu Aprendizado\n\n1. Qual é a diferença entre usar recursão e iteração para repetições?\n2. Implemente uma função que conte o número de dígitos em um número inteiro usando a estrutura `while`.\n3. Dado um número inteiro, escreva uma função que inverta seus dígitos (por exemplo, 123 se tornaria 321).\n\n## Explore por Conta Própria\n\n1. Pesquise sobre otimização de laços (loop unrolling) e tente aplicar esse conceito em uma função com `while`.\n\n",
    "supporting": [
      "07-while_files"
    ],
    "filters": [],
    "includes": {}
  }
}
{
  "hash": "69d16016179ba6072e3f55c9c6230723",
  "result": {
    "engine": "julia",
    "markdown": "---\nengine: julia\n---\n\n\n\n\n\n# Introdução às Funções\n\nObjetivo: Começar a entender como funcionam as funções em uma linguagem de programação\n\n## O uso de funções é uma abstração natural\n\nNa aula passada já vimos umas funções e isso foi bem natural, foram elas:\n\n- typeof() - Dado um parâmetro devolve o seu tipo. Variáveis estão\n  associadas a tipos;\n- div() - Dados dois parâmetros devolve a divisão inteira do primeiro pelo segundo;\n\n- print() e println() - Dados diversos parâmetros os imprime, sem devolver nada.\n\nInclusive, aqui vale a pena ver que podemos pedir ajuda ao Julia para saber o que fazem as\nfunções. Para isso, se usa o ? antes da função:\n\n```\n?typeof()\n?div()\n?print()\n```\n\n\n\nAo fazer isso, inclusive descobrimos que o div() pode ser usado também como \\div.\n\nUma outra função bem útil é a que permite transformar um tipo de valor em outro.\n\n```\nparse(Float64, \"32\")\n```\n\n\n\nPara conversão de valores em ponto flutuante para inteiros, temos a função trunc.\n\n```\ntrunc(Int64, 2.25)\n```\n\n\nDe forma inversa temos o float.\n\n```\nfloat(2)\n``` \n\n\nFinalmente, podemos transformar um valor em uma string, como em:\n\n```\nstring(3)\n```\n\n\n\nou\n\n```\nstring(3.57)\n```\n\n\nTambém tem muitas funções matemáticas prontas como\n\n| Função            | Descrição                                          |\n|:------------------|:--------------------------------------------------|\n| `sin(x)`          | Calcula o seno de \\( x \\) em radianos            |\n| `cos(x)`          | Calcula o cosseno de \\( x \\) em radianos         |\n| `tan(x)`          | Calcula a tangente de \\( x \\) em radianos        |\n| `deg2rad(x)`      | Converte \\( x \\) de graus em radianos            |\n| `rad2deg(x)`      | Converte \\( x \\) de radianos em graus            |\n| `log(x)`          | Calcula o logaritmo natural de \\( x \\)           |\n| `log(b, x)`       | Calcula o logaritmo de \\( x \\) na base \\( b \\)   |\n| `log2(x)`         | Calcula o logaritmo de \\( x \\) na base 2         |\n| `log10(x)`        | Calcula o logaritmo de \\( x \\) na base 10        |\n| `exp(x)`          | Calcula o expoente da base natural de \\( x \\)    |\n| `abs(x)`          | Calcula o módulo de \\( x \\)                       |\n| `sqrt(x)`         | Calcula a raiz quadrada de \\( x \\)                |\n| `cbrt(x)`         | Calcula a raiz cúbica de \\( x \\)                  |\n| `factorial(x)`    | Calcula o fatorial de \\( x \\)                     |\n\n\nA melhor forma de se acostumar a usar as funções é fazendo contas e\nverificando os resultados. Uma dica importante é que para funções mais\ncomplexas, pode ser que já existam funções prontas em Julia. Para isso\numa busca com as palavras chave. Um exemplo a seguir para procurar a função\npara o cálculo de seno hiperbólico: \"julia lang hiperbolic sin\". A busca pelo\ntermo em inglês é uma boa dica para buscas em geral.\n\nEm julia também é possível criar funções conforme as suas necessidades, como abaixo:\n\n\n\n\n\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nfunction mensagemDeBomDia()\n   println(\"Tenha um bom dia!\")\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nmensagemDeBomDia (generic function with 1 method)\n```\n:::\n:::\n\n\n\n\n\n\n\n\nPara usar uma função, basta chamá-la:\n\n\n```\nMensagemDeBomDia()\n```\n\nFunções, podem receber um ou mais parâmetros:\n\n\n\n\n\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nfunction imprime(a)\n   println(\" Vou imprimir \", a)\nend\nimprime(42)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Vou imprimir 42\n```\n:::\n:::\n\n\n\n\n\n\n\n\nTambém é possível que uma função chame outra função como em:\n\n\n\n\n\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nfunction imprimeduasvezes(a)\n   imprime(a)\n   imprime(a)\nend\nimprimeduasvezes(13)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Vou imprimir 13\n Vou imprimir 13\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\nMais ainda, também é possível diferenciar funções por meio da quantidade\nde parâmetros.\n\n\n\n\n\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nfunction recebe(a)\n  println(\"Recebi um parametro: \", a)\nend\nfunction recebe(a, b)\n  println(\"Recebi dois parametros: \", a, \" \", b)\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nrecebe (generic function with 2 methods)\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\nConforme a chamada, a função chamada será diferente:\n\n```\nrecebe(1)\nrecebe(1, 2)\n```\n\n\nTambém dá para chamar funções com variáveis e com operações, como\nem:\n\n```\na = 10\nrecebe(a)\nrecebe(a, a + 1)\n```\n\n\nAs funções que vimos até agora imprimem mensagens, mas não devolvem nada.\nO typeof() delas é nothing, ou seja, algo que não pode ser atribuído.\n\nMas, também é possível fazer funções que devolvem valores, como:\n\n```\nfunction soma1(a)\n  return a + 1\nend\n```\n\nNesse caso, se for passado um parâmetro numérico, a função devolverá o valor\nincrementado (adicionado de 1).\n\nClaro que isso pode ser usado com fórmulas mais complicadas como:\n\n\n\n\n\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nfunction hipotenusa(a, b)\n  hip = a * a + b * b\n  return hip\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nhipotenusa (generic function with 1 method)\n```\n:::\n:::\n\n\n\n\n\n\n\n\nExercício:\n\nFaça o passo a passo para encontrar as raízes da equação de segundo grau $x^2 - 5 x + 6$, usando\nas váriaveis `a`, `b`, `c`, `\\Delta`, `x1` e `x2`. Após isso, compare com a solução a seguir:\n\n\n\n\n\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\n\n# Definição dos coeficientes\na = 1\nb = -5\nc = 6\n\n# Cálculo do discriminante\ndelta = b^2 - 4 * a * c\n\n# Cálculo das raízes\nif delta >= 0\n    x1 = (-b + sqrt(delta)) / (2 * a)\n    x2 = (-b - sqrt(delta)) / (2 * a)\n    println(\"As raízes são: x1 = $x1 e x2 = $x2\")\nelse\n    println(\"A equação não possui raízes reais.\")\nend\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAs raízes são: x1 = 3.0 e x2 = 2.0\n```\n:::\n:::\n\n\n",
    "supporting": [
      "03-funcoes-recursao_files/figure-pdf"
    ],
    "filters": []
  }
}
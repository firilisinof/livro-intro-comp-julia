{
  "hash": "30acd1c1b051f5ff013e227c8439fd29",
  "result": {
    "engine": "julia",
    "markdown": "---\nengine: julia\n---\n\n\n\n\n\n\n\n\n# Estruturas de Controle e Tomada de Decisões\n\nO objetivo deste capítulo é entender como um programa pode tomar decisões e alterar seu fluxo de execução. Vamos explorar os operadores de comparação, o tipo booleano, e as estruturas condicionais `if`, `else` e `elseif` em Julia.\n\n## Operadores de Comparação e o Tipo Booleano\n\nAntes de estudarmos estruturas condicionais, precisamos entender os operadores de comparação e o tipo de dado que eles produzem: o tipo booleano (`Bool`). Uma variável booleana pode ter apenas dois valores possíveis: `true` (verdadeiro) ou `false` (falso).\nVamos examinar os principais operadores de comparação em Julia:\n\n\n\n\n\n\n\n\n::: {#2 .cell execution_count=1}\n``` {.julia .cell-code}\n# Igualdade: retorna true se os valores forem iguais\n2 + 2 == 4\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ntrue\n```\n:::\n:::\n\n\n\n::: {#4 .cell execution_count=1}\n``` {.julia .cell-code}\n# Diferença: retorna true se os valores forem diferentes\n3 != 8\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ntrue\n```\n:::\n:::\n\n\n\n::: {#6 .cell execution_count=1}\n``` {.julia .cell-code}\n# Menor que: retorna true se o primeiro valor for menor que o segundo\n23 < 24\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ntrue\n```\n:::\n:::\n\n\n\n::: {#8 .cell execution_count=1}\n``` {.julia .cell-code}\n# Menor ou igual: retorna true se o primeiro valor for menor ou igual ao segundo\n42 <= 44\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ntrue\n```\n:::\n:::\n\n\n\n::: {#10 .cell execution_count=1}\n``` {.julia .cell-code}\n# Maior que: retorna true se o primeiro valor for maior que o segundo\n42 > 2\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ntrue\n```\n:::\n:::\n\n\n\n::: {#12 .cell execution_count=1}\n``` {.julia .cell-code}\n# Maior ou igual: retorna true se o primeiro valor for maior ou igual ao segundo\n42 >= 42\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ntrue\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\nÉ importante observar que em linguagens de programação, incluindo Julia, o sinal de igual (`=`) é usado para atribuição de valores a variáveis, enquanto o operador de igualdade (`==`) é usado para comparações.\n\nPodemos verificar o tipo de uma expressão de comparação:\n\n\n\n\n\n\n\n\n::: {#14 .cell execution_count=1}\n``` {.julia .cell-code}\ntypeof(2 == 3)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nBool\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\nComo esperado, o tipo é `Bool`, indicando um valor booleano.\n\n\n### Operadores Lógicos\n\nAlém dos operadores de comparação, Julia também oferece operadores lógicos que permitem combinar ou modificar valores booleanos:\n\n\n\n\n\n\n\n\n::: {#16 .cell execution_count=1}\n``` {.julia .cell-code}\n# Operador NOT (negação): inverte o valor booleano\n!true\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nfalse\n```\n:::\n:::\n\n\n\n::: {#18 .cell execution_count=1}\n``` {.julia .cell-code}\n!false\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ntrue\n```\n:::\n:::\n\n\n\n::: {#20 .cell execution_count=1}\n``` {.julia .cell-code}\n# Operador AND: retorna true apenas se ambos os valores forem true\ntrue && true\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ntrue\n```\n:::\n:::\n\n\n\n::: {#22 .cell execution_count=1}\n``` {.julia .cell-code}\ntrue && false\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nfalse\n```\n:::\n:::\n\n\n\n::: {#24 .cell execution_count=1}\n``` {.julia .cell-code}\n# Operador OR: retorna true se pelo menos um dos valores for true\ntrue || false\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ntrue\n```\n:::\n:::\n\n\n\n::: {#26 .cell execution_count=1}\n``` {.julia .cell-code}\nfalse || false\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nfalse\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\nEsses operadores são essenciais para construir condições mais complexas em nossas estruturas condicionais.\n\n## Alterando o Fluxo de Execução com if-else\n\nAté agora, nossos programas seguiam um fluxo de execução linear, com as instruções sendo executadas na ordem em que foram escritas. Veja o exemplo:\n\n\n\n\n\n\n\n\n::: {#28 .cell execution_count=1}\n``` {.julia .cell-code}\nprintln(\"Oi\")\nprintln(\"um\")\nprintln(\"dois\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOi\num\ndois\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\nA ordem de impressão será \"Oi\", \"um\" e \"dois\", exatamente na sequência em que os comandos foram escritos.\n\nNo entanto, muitas vezes precisamos que nosso programa tome decisões e execute diferentes blocos de código dependendo de certas condições. É aqui que entra a estrutura condicional `if`.\n\n### A Estrutura if\n\nA estrutura **if** permite executar um bloco de código apenas se uma condição for verdadeira:\n\n\n\n\n\n\n\n\n::: {#30 .cell execution_count=1}\n``` {.julia .cell-code}\npandemia = true\nprintln(\"Vou sair de casa?\")\nif pandemia == true\n   println(\"Só vou sair de casa se for essencial\")\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nVou sair de casa?\nSó vou sair de casa se for essencial\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\nNeste exemplo, a mensagem \"Só vou sair de casa se for essencial\" só será impressa se a variável `pandemia` for igual a `true`.\n\nAqui está outro exemplo:\n\n\n\n\n\n\n\n\n::: {#32 .cell execution_count=1}\n``` {.julia .cell-code}\ndenominador = 1\nif denominador != 0\n   println(\"Sei fazer a divisão se não for por zero\")\n   println(\"O resultado da divisão de 30 por \", denominador, \" é igual a \", 30/denominador)\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSei fazer a divisão se não for por zero\nO resultado da divisão de 30 por 1 é igual a 30.0\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\nO código dentro do bloco `if` só será executado se o denominador for diferente de zero, evitando assim um erro de divisão por zero.\n\n### Adicionando Alternativas com else\n\nFrequentemente, queremos executar um bloco de código se uma condição for verdadeira e outro bloco se a condição for falsa. Para isso, usamos a estrutura **if-else**:\n\n\n\n\n\n\n\n\n::: {#34 .cell execution_count=1}\n``` {.julia .cell-code}\npandemia = true\nprintln(\"Vou sair de casa?\")\nif pandemia == true\n   println(\"Só vou sair de casa se for essencial\")\nelse\n   println(\"Balada liberada!!\")\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nVou sair de casa?\nSó vou sair de casa se for essencial\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\nSe a variável `pandemia` for `true`, será impressa a mensagem \"Só vou sair de casa se for essencial\". Caso contrário, será impressa a mensagem \"Balada liberada!!\".\n\n### Múltiplas Condições com elseif\n\nE se tivermos mais de duas situações possíveis? Nesse caso, podemos usar a estrutura **if-elseif-else**:\n\n\n\n\n\n\n\n\n::: {#36 .cell execution_count=1}\n``` {.julia .cell-code}\npandemia = true\ntenhoqueestudar = true\nprintln(\"Vou sair de casa?\")\nif pandemia == true\n   println(\"Só vou sair de casa se for essencial\")\nelseif tenhoqueestudar == true\n   println(\"Melhor ficar em casa\")\nelse\n   println(\"Balada liberada\")\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nVou sair de casa?\nSó vou sair de casa se for essencial\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\nNeste exemplo, temos três caminhos possíveis:\n\n1. Se houver pandemia, sair apenas se for essencial\n2. Se não houver pandemia mas eu tiver que estudar, ficar em casa\n3. Se não houver pandemia e eu não tiver que estudar, ir para a balada\n\nA estrutura **if-elseif-else** avalia as condições na ordem em que aparecem. Assim que uma condição verdadeira é encontrada, o bloco correspondente é executado e as demais condições são ignoradas.\n\n## Verifique seu Aprendizado\n\n1. Qual é a diferença entre o operador `=` e o operador `==` em Julia? Por que essa distinção é importante?\n2. Explique a diferença entre **if-else** e **if-elseif-else**. Em quais situações você usaria cada um?\n3. Considere a seguinte expressão booleana: `(a > b) && !(c == d)`. Explique em palavras o que ela significa.\n\n## Explore por Conta Própria\n\n1. Pesquise sobre a avaliação em curto-circuito dos operadores lógicos `&&` e `||` em Julia. Como esse comportamento pode ser útil em programação?\n2. Em Julia, além dos valores `true` e `false`, quais outros valores são considerados \"verdadeiros\" ou \"falsos\" em um contexto booleano?\n3. Investigue o operador ternário (`?:`) em Julia e como ele pode ser usado como uma alternativa mais concisa para certas estruturas **if-else**.\n4. Explore como as estruturas condicionais podem ser combinadas com funções para criar código mais modular e reutilizável.\n\n",
    "supporting": [
      "04-controle-fluxo_files"
    ],
    "filters": [],
    "includes": {}
  }
}